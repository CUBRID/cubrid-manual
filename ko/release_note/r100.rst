:tocdepth: 3

****************
10.0 릴리스 노트
****************

.. contents::

릴리스 노트 정보
================

본 문서는 CUBRID 10.0(빌드번호 10.0.x.xxxx)에 관한 정보를 포함한다.
CUBRID 10.0은 CUBRID 9.2에서 발견된 오류 수정 및 기능 개선과 과거 버전들에 반영된 모든 오류 수정 및 기능 개선을 포함한다.

9.2 이하 버전에 대한 정보는 http://www.cubrid.org/manual/92/ko/release_note/index.html\ 에서 확인할 수 있다.

CUBRID 2008 R4.3 이하 버전에 대한 정보는 http://release.cubrid.org/ko\ 에서 확인할 수 있다.

릴리스 특징
===========

CUBRID 10.0은 CUBRID 9.2를 안정화하고 개선한 버전이다. 

CUBRID 10.0은 CUBRID 9.2 이하 버전과 데이터베이스 볼륨이 호환되지 않으므로, 과거 버전 사용자는 반드시 **데이터베이스를 마이그레이션**\ 해야 한다. 이와 관련하여 :doc:`/upgrade` 절을 참고한다.

운영 편의성 개선
----------------

복제 동기화 잠금을 획득하지 못하는 경우의 에러 로그 레벨을 NOTIFICATION 에서 ERROR로 변경(CUBRIDSUS-14156)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

복제 동기화 잠금을 영구히 획득할 수 없어서 복제 반영이 멈춘 경우에도, 에러 로그 레벨에 따라서 에러 로그가 기록되지 않는 문제가 있다. 
이 상황을 사용자가 감시할 수 있도록 해당 메시지에 대한 에러 로그 수준을 NOTIFICATION에서 ERROR로 변경했다. 
해당 에러 메시지는 applylogdb의 에러 로그 파일($CUBRID/log/<db-name>@<local-node-name>_applylogdb_<db-name>_<remote-node-name>.err )에 출력된다. 

:: 

    Unable to mount disk volume "/home/cubrid/CUBRID/var/APPLYLOGDB/testdb". The database "testdb", to which the disk volume belongs, is in use by user - on process 13223 of host - since -. 
  
복제 동기화 잠금을 영구히 획득할 수 없는 경우는 아래와 같다. 

*   기존 HA 그룹으로 구성되어 복제 반영 중이던 노드가 제거된 경우 
*   기존 HA 그룹으로 구성되어 복제 반영 중이던 노드의 이름이 변경된 경우 

SQL 함수 및 구문 추가
---------------------


성능 향상
---------


HA 복제 안정화    
--------------



Sharding 기능 개선 및 안정화 
----------------------------


다국어
------

    
동작 변경
---------


설정
----


설치
----


드라이버 호환성
---------------
*   10.0 버전의 JDBC와 CCI 드라이버는 CUBRID 9.1, 9.2 및 CUBRID 2008 R4.1, R4.3, R4.4 버전의 DB와 연동된다.

이외에도 많은 안정성 이슈가 수정되었다. 보다 자세한 변경 사항은 아래의 내용을 참고하며, 예전 버전 사용자는 :ref:`changed-behaviors100` 절과 :ref:`new-cautions100` 절을 반드시 확인하도록 한다.

기능 추가
=========


SQL
---

CREATE PROCECURE/FUNCTION 문에서 "OR REPLACE" 구문을 사용할 수 있게 수정(CUBRIDSUS-6542)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: sql

    CREATE FUNCTION func_or_replace(I IN NUMBER) RETURN NUMBER 
    AS LANGUAGE JAVA NAME 'sptest.testint(INT) RETURN INT';

    CREATE OR REPLACE FUNCTION func_or_replace(I IN NUMBER) RETURN NUMBER 
    AS LANGUAGE JAVA NAME 'sptest.testint(INT) RETURN INT';

    CREATE PROCEDURE proc_or_replace(I IN NUMBER) 
    AS LANGUAGE JAVA NAME 'sptest.testint2(INT)';

    CREATE OR REPLACE PROCEDURE proc_or_replace(I IN NUMBER) 
    AS LANGUAGE JAVA NAME 'sptest.testint2(INT)';
    
테이블 표현식을 감싸는 괄호를 허용하도록 수정(CUBRIDSUS-6380)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

아래 예와 같이 "(SELECT * FROM tab1) AS tab11"와 같은 테이블 표현식을 괄호로 감싸도 테이블 표현식으로 인식되도록 수정했다. 

.. code-block:: sql 

    SELECT * FROM ((SELECT * FROM tab1) AS tab11), tab0; 

수정 이전 버전에서 위의 질의를 수행하면 아래의 오류를 반환한다. 
     
:: 

    ERROR: syntax error, unexpected AS, expecting ')' 

"UPDATE tbl SET a=1, b=a" 수행 시 b의 값이 1이 될 수 있도록 수정(CUBRIDSUS-8202)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


update_use_attribute_references 시스템 파라미터를 추가하고, 이 값이 yes이면 UPDATE 문에서 명시한 칼럼 값이 해당 칼럼을 사용하는 다른 칼럼의 갱신에 영향을 주도록 수정했다. 
이 파라미터 값이 no(기본값)이면 수정 전처럼 동작한다. 

.. code-block:: sql 

    CREATE TABLE tbl(a int, b int); 
    INSERT INTO tbl values (null, 10); 

    UPDATE tbl SET a=1, b=a; 
    SELECT * FROM tbl; 
    -- 수정 전 버전에서는 1, 10을 반환한다. 
    -- 수정 이후 버전에서는 update_use_attribute_references 시스템 파라미터의 값이 no이면 수정 전 버전과 같은 값을, yes이면 1,1을 반환한다. 


"CASCADE CONSTRAINTS" 절을 DROP 테이블 문장에 추가하여, 외래 키가 참조하는 기본 키를 가진 테이블의 DROP이 가능하도록 수정(CUBRIDSUS-9830)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: sql 

    CREATE TABLE a_parent ( 
        id INTEGER PRIMARY KEY, 
        name VARCHAR(10) 
    ); 
    CREATE TABLE b_child ( 
        id INTEGER PRIMARY KEY, 
        parent_id INTEGER, 
        CONSTRAINT fk_parent_id FOREIGN KEY(parent_id) REFERENCES a_parent(id) ON DELETE CASCADE ON UPDATE RESTRICT 
    ); 

    DROP TABLE a_parent CASCADE CONSTRAINTS; 
     
위의 질의를 수행하면 a_parent 테이블이 DROP되며, b_child 테이블의 외래 키 역시 DROP된다. 단, b_child 테이블의 데이터는 유지된다. 

통계 정보 갱신 시 샘플링 방식 도입(CUBRIDSUS-11962)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
통계 정보 갱신 시 샘플링 방식을 도입하여 통계 정보 갱신 시간이 단축되었다. 

수정 이후, "UPDATE STATISTICS" 문 뒤에 "WITH FULLSCAN" 구문이 없으면 샘플링된 데이터를 가지고 통계 정보를 업데이트하며, "WITH FULLSCAN"을 추가하면 전체 데이터를 가지고 통계 정보를 업데이트한다. 
  
.. code-block:: sql 
  
    UPDATE STATISTICS ON foo; 
    UPDATE STATISTICS ON foo WITH FULLSCAN; 

"CREATE TABLE IF NOT EXISTS" 구문 지원(CUBRIDSUS-12366)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: sql

    CREATE TABLE IF NOT EXISTS tbl1;

드라이버
--------

[CCI] 로그인 타임아웃 값 변경 함수 추가 및 datasource 속성 변경 함수 추가(CUBRIDSUS-12530)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
다음 함수들이 추가되었다.
 
*   cci_set_login_timeout  
 
        로그인 타임아웃을 밀리초 단위로 설정한다.
    
*   cci_get_login_timeout
 
        로그인 타임아웃 값을 반환한다.
 
    
*   cci_datasource_change_property
 
    CCI의 DATASOURCE에 대해 key에 명시한 속성(property)의 값을 val에 설정한다. 이 함수를 사용하여 변경한 속성 값은 datasource 내 모든 연결에 적용된다.
 
    
운영 편의성
-----------


HA
--


Sharding
--------


다국어
------

유틸리티
--------


설정
----



.. _changed-behaviors100:

동작 변경
=========

SQL
---


다국어
------


HA
--



드라이버
--------


.. _changed-config100:

설정
----


기타
----



개선 및 오류 수정 
=================

성능 및 최적화
--------------


집계 함수와 GROUP BY 절을 포함하며 커버링 인덱스가 적용되는 질의에서 GROUP BY 절 최적화(skip group by)에 의한 인덱스 스킵 스캔이 적용되도록 수정(CUBRIDSUS-7508)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: sql

    CREATE TABLE tab (k1 int, k2 int, k3 int, v double);
    INSERT INTO tab
    SELECT
        RAND(CAST(UNIX_TIMESTAMP() AS INT)) MOD 5,
        RAND(CAST(UNIX_TIMESTAMP() AS INT)) MOD 10,
        RAND(CAST(UNIX_TIMESTAMP() AS INT)) MOD 100000,
        RAND(CAST(UNIX_TIMESTAMP() AS INT)) MOD 100000
    FROM db_class a, db_class b, db_class c, db_class d LIMIT 20000;
    CREATE INDEX idx ON tab(k1, k2, k3);
 
    SELECT /*+ RECOMPILE */ k1, k2, SUM(DISTINCT k3)          
    FROM tab 
    WHERE k2 > -1 
    GROUP BY k1, k2;

위의 예는 k1, k2 칼럼으로 GROUP BY를 수행하며 k3로 집계 함수를 수행하므로 tab(k1, k2, k3)로 구성된 인덱스가 사용되고 별도의 정렬 과정이 필요 없다. 또한 SELECT 리스트에 있는 k1, k2, k3 칼럼이 모두 tab(k1, k2, k3)로 구성된 인덱스 내에 존재하므로 커버링 인덱스가 적용된다.
    
안정성
------


SQL
---

고유 인덱스를 DROP할 때 UNQUE 키워드를 명시하지 않아도 정상 수행되도록 수정(CUBRIDSUS-9352)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
.. code-block:: sql 
  
    DROP INDEX unique_index_name ON table_name ; 
    ALTER TABLE table_name DROP INDEX unique_index_name ; 
    
LIMIT 절 또는 ORDER BY 절을 포함한 UNION ALL 질의로 생성한 뷰에 대해 SELECT 수행 시 LIMIT 절 또는 ORDER BY 절이 무시되는 현상(CUBRIDSUS-8059)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: sql 

    CREATE VIEW v11 as 
    SELECT * FROM t21 UNION ALL SELECT * FROM t22 LIMIT 1, 3; 
     
    SELECT * FROM v11; 

수정 이전 버전에서 위의 질의를 수행하면 LIMIT 1, 3이 무시된다.

예약어로 된 칼럼 이름이 "테이블 (별칭)."과 같이 사용되는 경우 이를 겹따옴표로 감싸지 않아도 질의 수행이 가능하도록 수정(CUBRIDSUS-8909)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: sql 

    CREATE TABLE tbl ("int" int, "double" double); 

수정 이전 버전에서는 아래의 질의를 수행하면 오류가 발생하지만, 수정 이후 버전에서는 정상 수행된다. 
     
.. code-block:: sql 

    SELECT t.int FROM tbl t; 

LIMIT 절을 포함하는 SELECT ... UNION 문으로 생성한 VIEW에 LIMIT가 적용되지 않는 문제(CUBRIDSUS-10265)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: sql 

    CREATE TABLE s1(i int, j int); 
    INSERT INTO s1 VALUES (1,1), (2,2), (3,3), (4,4), (5,5), (6,6), (7,7), (8,8), (9,9), (10,10); 
    CREATE VIEW v1 AS (SELECT * FROM s1 UNION SELECT * FROM s1) LIMIT 2; 

    -- 수정 이전 버전에서 아래의 질의를 수행하면 LIMIT 절이 적용되지 않아 10건의 레코드가 모두 출력된다. 
    SELECT * FROM SELECT * FROM v1;

VIEW에 LIMIT 절이 있을 때 INSERT .. ON DUPLICATE KEY UPDATE 문 수행에 실패하는 현상(CUBRIDSUS-10853)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: sql 
     
    CREATE TABLE tbl(a INT unique); 
    INSERT INTO tbl VALUES (2), (3); 

    CREATE VIEW vw AS SELECT a FROM t1 ORDER BY a LIMIT 1; 
     
    -- 수정 이전 버전에서는 아래 질의 수행 시 값이 UPDATE되지 않는다. 
    INSERT INTO vw VALUES (2) ON DUPLICATE KEY UPDATE a=1; 

카탈로그 테이블과 뷰에서 DB의 문자셋 이름, 콜레이션 이름을 확인할 수 있도록 수정(CUBRIDSUS-10948)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

시스템 테이블 _db_charset과 db_charset을 추가하여 DB의 문자셋 이름을 확인할 수 있게 되었다. 
또한 시스템 뷰 db_attribute과 db_class에 존재하던 code_set 칼럼이 제거되고, charset 칼럼이 추가되었다. 이와 함께, collation 칼럼이 추가되었다.

수정 이후 CHAR, VARCHAR 그리고 ENUM 타입에 대해 db_attribute 뷰의 collation 칼럼과 charset 칼럼 정보를 출력한다. 

DEFAULT 속성과 SHARED 속성 간 변환 시 정상 동작하지 않는 오류(CUBRIDSUS-11135)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: sql 
     
    CREATE TABLE sharedefault( 
        sh character(1) SHARED 'a', 
        de character(1) DEFAULT 'b' 
    ); 
    -- 수정 이전 버전에서는 아래 질의를 수행해도 SHARED, DEFAULT 속성이 바뀌지 않는 오류가 존재한다. 
    ALTER TABLE sharedefault CHANGE COLUMN sh sh character(1) DEFAULT 'a'; 
    ALTER TABLE sharedefault CHANGE COLUMN de de character(1) SHARED 'b';

ALTER INDEX ... REBUILD, DROP INDEX 구문에 테이블 이름을 명시하도록 수정(CUBRIDSUS-11308)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: sql 
  
    ALTER INDEX a ON tbl_name REBUILD; 
    DROP INDEX b ON tbl_name; 


GROUP BY ... ROLLUP과 함께 LIMIT 절을 사용하면 한 행이 더 출력됨(CUBRIDSUS-11454)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

.. code-block:: sql 

    CREATE TABLE foo (a VARCHAR(50), b VARCHAR(50), c VARCHAR(50), d VARCHAR(50)); 
    INSERT INTO foo VALUES ('1', '1', '1', 'dd'); 
    INSERT INTO foo VALUES ('1', '1', '2', 'dd'); 
    INSERT INTO foo VALUES ('2', '2', '2', 'dd'); 
    INSERT INTO foo VALUES ('1', '2', '1', 'dd'); 
    INSERT INTO foo VALUES ('1', '2', '2', 'dd'); 
    INSERT INTO foo VALUES ('2', '1', '1', 'dd'); 
    INSERT INTO foo VALUES ('2', '1', '2', 'dd'); 
    INSERT INTO foo VALUES ('2', '2', '1', 'dd'); 

수정 이전 버전에서는 아래 질의 수행 시 LIMIT 3인데 4건을 출력하는 오류가 존재한다. 
    
.. code-block:: sql 
    
    SELECT a, b, c, count(*) from foo group by a, b, c with rollup limit 3; 

::
    
      '1' '1' '1' 1 
      '1' '1' '2' 1 
      '1' '1' NULL 2 
      '1' '2' '1' 1

다국어
------


분할
----


HA
--



INHERIT 절이 있는 질의의 복제에 실패하는 현상(CUBRIDSUS-11409)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: sql 

    ALTER CLASS t0004 ADD SUPERCLASS t0001,t0002,t0003 
     INHERIT col3 OF t0001, 
     col3 OF t0003 AS col3_modify_1, 
     col4 OF t0001, 
     col4 OF t0003 AS col4_modify_3, 
     ddl5 OF t0001, 
     ddl5 OF t0003 AS ddl5_modify_5; 

applylogdb가 schema 복제 반영에 실패했을 때 기록하는 로그의 형식 수정(CUBRIDSUS-11426)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

applylogdb 로그에 에러 코드 뿐만 아니라 에러 메시지를 같이 남기도록 수정했다. 
       
:: 
  
    // 수정 이전 
    log applier: failed to apply schema replication log. class: "rt2", schema: "'create class [rt2] as select * from [rt1]'", internal error: -1016. 
    log applier: failed to apply schema replication log. class: "-", schema: "'drop [rt2]'", internal error: -492. 
     
    // 수정 이후 
    log applier: failed to apply schema replication log. class: "rt2", schema: "'create class [rt2] as select * from [rt1]'", server error: -1016, POSIX external storage error: /home1/DB/tdb/lob/ces_276/rt1.00001377079956388423_2523... No such file or directory. 
    log applier: failed to apply schema replication log. class: "-", schema: "'drop [rt2]'", server error: -492, Unknown class "rt2".. 

copylogdb를 두 번 구동하는 경우 잘못된 에러 메시지가 출력됨(CUBRIDSUS-12043)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
수정 이전 버전의 HA 환경에서 copylogdb 를 두번 실행 시 아래와 같은 에러가 출력된다. 
  
:: 
  
    Server $haid@cubhost:/home1/cubrid1/DB/haid_cubhost already exists. 
  
이는 잘못된 에러 메시지이므로 아래와 같이 출력하도록 수정했다. 
  
:: 
  
    Copylogdb for haid@cubhost:/home1/cubrid1/DB/haid_cubhost already exists. 
    or 
    Applylogdb for haid@cubhost:/home1/cubrid1/DB/haid_cubhost already exists. 

    
Sharding
--------


응용 프로그램에서 shard key의 입력 값 타입으로 16bit, 64bit integer를 추가로 지원하도록 수정(CUBRIDSUS-11920)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
응용 프로그램에서 shard key의 입력 값에 대한 정수형 타입으로 수정 이전에는 32bit integer만 지원했으나 수정 이후 16bit(short), 32bit(int), 64bit(INT64) integer를 모두 지원한다. 

드라이버
--------

[CCI] prepare 또는 execute 함수에서 내부적인 재접속 시 login_timeout 속성이 적용되도록 수정(CUBRIDSUS-12530)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
수정 이전 버전에서는 prepare 또는 execute 함수에서 내부적인 재접속 시 로그인 타임아웃이 적용되지 않았으나 login_timeout이 설정되어 있을 경우 반영되도록 수정했다.

[CCI] shard_key가 VARCHAR인 경우 hash 함수의 결과가 모두 동일한 값이 되는 현상(CUBRIDSUS-11487)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CCI 응용 프로그램에서 shard_key가 VARCHAR인 경우 hash 함수의 결과가 모두 동일한 값이 되어, 동일한 shard에서만 질의가 수행되는 현상을 수정했다. 
참고로, JDBC 응용 프로그램에서는 이 현상이 발생하지 않는다. 
수정된 버전에서는 shard_key가 VARCHAR인 경우의 hash 함수를 지원하지 않는다. 


SELECT 리스트의 데이터가 테이블의 칼럼이 아닌 경우(예: 표현식)에도 CCI_GET_RESULT_INFO_IS_NON_NULL 매크로가 NON_NULL 여부에 관계 없이 0을 반환하도록 수정(CUBRIDSUS-8106)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**SELECT** 리스트의 데이터가 표현식인 경우 NON_NULL 여부를 알 수 없으므로 CCI_GET_RESULT_INFO_IS_NON_NULL 매크로는 일관되게 0을 반환한다.

운영 편의성
-----------

유틸리티
--------

Windows에서 DB 생성 시 --lob-base-path 옵션 값에 "D:"와 같이 드라이브 이름을 포함하면 실패하는 현상(CUBRIDSUS-10590)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
:: 
  
    cubrid createdb testdb --lob-base-path=D:\lob_base
    

설정, 빌드 및 설치
------------------


기타
----

중복 키 오류 출력 시 인덱스 이름이 출력되지 않는 문제(CUBRIDSUS-11739)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

수정 이전 버전에서는 중복 키 오류 출력 시 인덱스 이름 대신 UNKNOWN-INDEX을 출력한다. 
  
:: 
  
    ERROR: Operation would have caused one or more unique constraint violations. INDEX *UNKNOWN-INDEX*(B+tree: 0|137|-1) ON CLASS foo(CLASS_OID: 0|522|25). key: 1(OID: 0|560|12). 
  
수정 이후 버전에서는 중복 키 오류 출력 시 인덱스 이름을 출력한다. 
     
:: 
  
    ERROR: Operation would have caused one or more unique constraint violations. INDEX u_t_i(B+tree: 0|152|830) ON CLASS foo(CLASS_OID: 0|486|13). key: 1(OID: 0|560|10). 
    
인덱스 스킵 스캔으로 질의 계획 생성할 때 비용이 inf로 잘못 출력되는 현상(CUBRIDSUS-12011)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
주의 사항
=========

.. _new-cautions100:

신규 주의 사항
--------------

9.2 버전과 9.1 버전 사이에 DB 볼륨 호환 안 됨(CUBRIDSUS-11316)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

9.2 버전과 9.1 버전 사이에 DB 볼륨이 호환되지 않게 됨에 따라 CUBRID 9.1을 9.2로 업그레이드하는 사용자는 CUBRID 9.2 설치 이후 기존의 DB 볼륨을 9.2용으로 반드시 변환해야 한다. 볼륨 마이그레이션을 위해서 9.2 버전에 제공되는 migrate_91_to_92 유틸리티를 제공한다. ::

    % migrate_91_to_92 <db_name>

보다 자세한 사항은  :doc:`/upgrade`\ 를 참고한다.

.. note:: 

    9.1 버전 및 그 이전 버전 사용자는 데이터를 마이그레이션하는 것과 함께 드라이버, 브로커, DB 서버 모두를 반드시 업그레이드해야 한다.

9.2 버전과 9.1 이전 버전 간에 DB 볼륨이 호환되지 않음
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

9.1 이전 버전과 DB 볼륨이 호환되지 않으므로 cubrid unloaddb/loaddb를 이용하여 데이터를 마이그레이션해야 한다. 보다 자세한 사항은  :doc:`/upgrade`\ 를 참고한다.

기존 주의 사항
--------------

데이터베이스 생성 시에 로캘(언어 및 문자셋) 명시
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

데이터베이스 생성 시에 로캘을 지정하도록 변경되었다.

CUBRID_CHARSET 환경 변수 제거
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

데이터베이스 생성 시에 로캘을 지정하도록 변경됨으로 인하여 9.2부터는 CUBRID_CHARSET 환경변수는 더 이상 사용되지 않는다.

.. 4.4new

[JDBC] 연결 URL의 zeroDateTimeBehavior 속성 값이 "round"일 때 TIMESTAMP의 zero date가 '0001-01-01 00:00:00'에서 '1970-01-01 00:00:00'(GST)로 변경됨(CUBRIDSUS-11612)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
2008 R4.4부터, 연결 URL의 zeroDateTimeBehavior 속성 값이 "round"일 때 TIMESTAMP의 zero date 값이 '0001-01-01 00:00:00'에서 '1970-01-01 00:00:00'(GST)로 변경되었으므로, 응용 프로그램에서 zero date를 사용하는 경우 주의해야 한다.

AIX용 CUBRID를 SH 패키지로 설치 시 권장 사항(CUBRIDSUS-12251)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

AIX OS에서 ksh를 사용하여 CUBRID SH 설치 패키지를 설치하는 경우, 다음의 경고 메시지와 함께 실패하므로, 
  
:: 
  
    0403-065 An incomplete or invalid multibyte character encountered. 
  
CUBRID SH 설치 패키지를 실행하려면 ksh 대신 ksh93 또는 bash를 사용할 것을 권장한다. 
  
:: 
  
    $ ksh93 ./CUBRID-9.2.0.0146-AIX-ppc64.sh 
    $ bash ./CUBRID-9.2.0.0146-AIX-ppc64.sh 

CUBRID_LANG 환경 변수 제거, CUBRID_MSG_LANG 환경 변수 추가
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

9.1 버전부터 CUBRID_LANG 환경 변수는 더 이상 사용되지 않는다.
유틸리티 메시지 및 오류 메시지를 출력할 때는 CUBRID_MSG_LANG 환경 변수를 사용한다. 

CCI 응용 프로그램에서 여러 개의 질의를 한 번에 수행한 결과의 배열에 대한 에러 처리 방식 수정(CUBRIDSUS-9364)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CCI 응용에서 여러 개의 질의를 한 번에 수행할 때 2008 R3.0부터 2008 R4.1 버전까지는 cci_execute_array 함수, cci_execute_batch 함수 또는 cci_execute_result 함수에 의한 질의 수행 결과들 중 하나만 에러가 발생해도 해당 질의의 에러 코드를 반환했으나, 2008 R4.3 버전 및 9.1 버전부터는 전체 질의 개수를 반환하고 CCI_QUERY_RESULT_* 매크로들을 통해 개별 질의에 대한 에러를 확인할 수 있도록 수정했다.

수정 이전 버전에서는 에러가 발생한 경우에도 배열 내 각각의 질의들의 성공 실패 여부를 알 수 없으므로, 이를 판단해야 한다.

.. code-block:: c

    ...
    char *query = "INSERT INTO test_data (id, ndata, cdata, sdata, ldata) VALUES (?, ?, 'A', 'ABCD', 1234)";
    ...
    req = cci_prepare (con, query, 0, &cci_error);
    ...
    error = cci_bind_param_array_size (req, 3);
    ...
    error = cci_bind_param_array (req, 1, CCI_A_TYPE_INT, co_ex, null_ind, CCI_U_TYPE_INT);
    ...
    n_executed = cci_execute_array (req, &result, &cci_error);

    if (n_executed < 0)
      {
        printf ("execute error: %d, %s\n", cci_error.err_code, cci_error.err_msg);

        for (i = 1; i <= 3; i++)
          {
            printf ("query %d\n", i);
            printf ("result count = %d\n", CCI_QUERY_RESULT_RESULT (result, i));
            printf ("error message = %s\n", CCI_QUERY_RESULT_ERR_MSG (result, i));
            printf ("statement type = %d\n", CCI_QUERY_RESULT_STMT_TYPE (result, i));
          }
      }
    ...
    
수정 이후 버전에서는 에러가 발생하면 전체 질의가 실패한 것이며, 에러가 발생하지 않은 경우에 대해 배열 내 각 질의들의 성공 실패 여부를 판단한다.

.. code-block:: c

    ...
    char *query = "INSERT INTO test_data (id, ndata, cdata, sdata, ldata) VALUES (?, ?, 'A', 'ABCD', 1234)";
    ...
    req = cci_prepare (con, query, 0, &cci_error);
    ...
    error = cci_bind_param_array_size (req, 3);
    ...
    error = cci_bind_param_array (req, 1, CCI_A_TYPE_INT, co_ex, null_ind, CCI_U_TYPE_INT);
    ...
    n_executed = cci_execute_array (req, &result, &cci_error);
    if (n_executed < 0)
      {
        printf ("execute error: %d, %s\n", cci_error.err_code, cci_error.err_msg);
      }
    else
      {
        for (i = 1; i <= 3; i++)
          {
            printf ("query %d\n", i);
            printf ("result count = %d\n", CCI_QUERY_RESULT_RESULT (result, i));
            printf ("error message = %s\n", CCI_QUERY_RESULT_ERR_MSG (result, i));
            printf ("statement type = %d\n", CCI_QUERY_RESULT_STMT_TYPE (result, i));
          }
      }
    ...

javax.sql.XAConnection 인터페이스에서 HOLD_CURSORS_OVER_COMMIT 미지원(CUBRIDSUS-10800)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CUBRID는 현재 javax.sql.XAConnection 인터페이스에서 ResultSet.HOLD_CURSORS_OVER_COMMIT을 지원하지 않는다.

9.0 버전부터 STRCMP는 대소문자를 구분하여 문자열을 비교
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

9.0 이전 버전까지는 STRCMP가 대소문자를 구분하지 않고 문자열을 비교했으나, 
9.0 버전부터는 대소문자를 구분하여 문자열을 비교한다. STRCMP가 대소문자를 구분하지 않고 동작하게 하려면 문자열에 대소문자를 구분하지 않는 콜레이션(예: utf8_en_ci)을 지정해야 한다.
    
.. code-block:: sql

    -- In previous version of 9.0 STRCMP works case-insensitively
    SELECT STRCMP ('ABC','abc');
    0
    
    -- From 9.0 version, STRCMP distinguish the uppercase and the lowercase when the collation is case-sensitive.
    -- charset is en_US.iso88591
    
    SELECT STRCMP ('ABC','abc');
    -1
    
    -- If the collation is case-insensitive, it distinguish the uppercase and the lowercase.
    -- charset is en_US.iso88591

    SELECT STRCMP ('ABC' COLLATE utf8_en_ci ,'abc' COLLATE utf8_en_ci);
    0

2008 R4.1 버전부터 CCI_DEFAULT_AUTOCOMMIT 의 기본값이 ON으로 바뀜(CUBRIDSUS-5879)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

2008 R4.1 버전부터 CCI 인터페이스로 개발된 응용 프로그램의 자동 커밋 모드에 영향을 주는 브로커 파라미터인 CCI_DEFAULT_AUTOCOMMIT의 기본값이 ON으로 변경되었다. 따라서 CCI 및 CCI로 개발된 인터페이스(PHP, ODBC, OLE DB 등) 사용자는 응용 프로그램의 자동 커밋 모드가 이에 적합한지 살펴보아야 한다.

2008 R4.0 버전부터 페이지 단위의 옵션 및 파라미터가 볼륨 크기 단위로 바뀜(CUBRIDSUS-5136)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

cubrid createdb 유틸리티의 DB 볼륨 크기 및 로그 볼륨 크기를 지정할 때 페이지 단위를 사용하는 옵션들(-p, -l, -s)은 제거될 예정이므로, 2008 R4.0 Beta 이후 새로 추가된 옵션들(--db-volume-size, --log-volume-size, --db-page-size, --log-page-size)을 사용한다.

cubrid addvoldb 유틸리티의 DB 볼륨 크기를 지정하는 경우에도 페이지 단위를 사용하지 않고 2008 R4.0 Beta 이후 새로 추가된 옵션(--db-volume-size)을 사용한다.
페이지 단위의 시스템 파라미터들은 추후 제거될 예정이므로 바이트 단위의 새로운 시스템 파라미터를 사용할 것을 권장한다. 관련 시스템 파라미터들에 대한 내용은 아래를 참고한다.

2008 R4.0 Beta 미만 사용자는 DB 볼륨 크기 설정 시 주의(CUBRIDSUS-4222)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

2008 R4.0 Beta 버전부터 DB 생성 시 데이터 페이지 및 로그 페이지의 크기 기본값이 4KB에서 16KB로 변경되었으므로, DB 볼륨을 페이지 개수로 지정하여 생성하는 경우 볼륨의 바이트 크기가 기대와 다를 수 있음에 주의한다. 아무런 옵션도 주지 않을 경우 이전 버전에서는 4KB의 페이지 크기로 100MB의 DB 볼륨을 생성했으나, 2008 R4.0 버전부터는 16KB의 페이지 크기로 512MB의 DB 볼륨을 생성하게 된다.

그리고, DB 볼륨의 생성 가능한 최소 크기를 20MB로 제한했으므로 이보다 작은 크기의 DB 볼륨은 생성할 수 없다.

2008 R4.0 미만 버전의 일부 시스템 파라미터들의 기본값 변경(CUBRIDSUS-4095)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

2008 R4.0부터 다음 시스템 파라미터들의 기본값이 변경되었다.

DB 서버가 허용하는 동시 연결 개수를 설정하는 max_clients의 기본값, 인덱스 페이지 생성 시 향후 업데이트를 대비하여 확보하는 여유 공간 비율을 설정하는 index_unfill_factor의 기본값이 변경되었으며, 바이트 단위 시스템 파라미터의 기본값이 기존 페이지 단위 시스템 파라미터의 기본값보다 커져서 별도의 설정을 하지 않는 경우 더 많은 메모리를 사용하게 되었다.

+-----------------------------+----------------------------+----------------------+--------------------+ 
| 기존                        | 추가된                     | 기존                 | 변경된             | 
| 시스템 파라미터             | 시스템  파라미터           | 기본값               | 기본값             |
|                             |                            |                      | (단위: 바이트)     | 
+=============================+============================+======================+====================+ 
| max_clients                 | 없음                       | 50                   | 100                | 
+-----------------------------+----------------------------+----------------------+--------------------+ 
| index_unfill_factor         | 없음                       | 0.2                  | 0.05               | 
+-----------------------------+----------------------------+----------------------+--------------------+
| data_buffer_pages           | data_buffer_size           | 100M(페이지 크기=4K) | 512M               | 
+-----------------------------+----------------------------+----------------------+--------------------+
| log_buffer_pages            | log_buffer_size            | 200K(페이지 크기=4K) | 4M                 | 
|                             |                            |                      |                    |
+-----------------------------+----------------------------+----------------------+--------------------+
| sort_buffer_pages           | sort_buffer_size           | 64K(페이지 크기=4K)  | 2M                 | 
|                             |                            |                      |                    | 
+-----------------------------+----------------------------+----------------------+--------------------+
| index_scan_oid_buffer_pages | index_scan_oid_buffer_size | 16K(페이지 크기=4K)  | 64K                | 
|                             |                            |                      |                    | 
+-----------------------------+----------------------------+----------------------+--------------------+

또한, cubrid createdb로 DB 생성 시 데이터 페이지 크기와 로그 페이지 크기의 최소값이 1K에서 4K로 변경되었다.

시스템 파라미터를 잘못 설정하면 DB 서비스, 유틸리티 및 응응 프로그램이 구동되지 않음(CUBRIDSUS-5375)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

cubrid.conf 또는 cubrid_ha.conf에 정의되지 않은 시스템 파라미터를 설정하거나, 페이지 단위의 시스템 파라미터와 바이트 단위의 시스템 파라미터가 동시에 사용되거나, 시스템 파라미터 값이 허용 범위를 벗어나면 이와 관련된 DB 서비스, 유틸리티 및 응응 프로그램이 구동되지 않는다.

CUBRID 32bit 버전에서 data_buffer_size에 2G를 초과하는 값을 설정하면 DB 구동에 실패함(CUBRIDSUS-5349)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CUBRID 32bit 버전에서 data_buffer_size가 2G를 초과하는 값으로 설정되는 경우 DB 구동에 실패한다. 32bit 버전에서는 OS의 한계로 인해 설정값이 2G를 초과할 수 없음에 주의한다.


Windows Vista 이상 버전에서 CUBRID 유틸리티를 사용한 서비스 제어 시 권장 사항(CUBRIDSUS-4186)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Windows Vista 이상 버전에서 cubrid 유틸리티를 사용하여 서비스를 제어하려면 명령 프롬프트 창을 관리자 권한으로 구동한 후 사용하는 것을 권장한다.

명령 프롬프트 창을 관리자 권한으로 구동하지 않고 cubrid 유틸리티를 사용하는 경우 UAC(User Account Control) 대화 상자를 통하여 관리자 권한으로 수행될 수 있으나 수행 결과 메시지를 확인할 수 없다.

Windows Vista 이상 버전에서 명령 프롬프트 창을 관리자 권한으로 구동하는 방법은 다음과 같다.

*   [시작> 모든 프로그램> 보조 프로그램> 명령 프롬프트]에서 마우스 오른쪽 버튼을 클릭한다.
    
*   [관리자 권한으로 실행(A)]을 선택하면 권한 상승을 확인하는 대화 상자가 활성화되고, "예"를 클릭하여 관리자 권한으로 구동한다.

CUBRID 소스 빌드 후 실행 시, 매니저 서버 프로세스 관련 오류 발생(CUBRIDSUS-3553)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

사용자가 직접 빌드하여 설치하는 경우, CUBRID와 CUBRID 매니저를 각각 빌드하여 설치해야 한다. 만약, CUBRID 소스만 checkout하여 빌드 후 cubrid service start 또는 cubrid manager start를 실행하면, cubrid manager server is not installed라는 오류가 발생한다.

2008 R3.0 이하 버전에서 사용하던 GLO 클래스 지원 중단(CUBRIDSUS-3826)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CUBRID 2008 R3.0 이하 버전은 glo (Generalized Large Object) 클래스를 사용하여 Large Object를 처리했으나, CUBRID 2008 R3.1 이상 버전 glo 클래스를 제거하고 BLOB, CLOB 타입(이하 LOB)을 지원한다. LOB 데이터 타입에 대한 자세한 내용은 :ref:`blob-clob` 절을 참고하면 된다.

기존의 glo 클래스 사용자는 다음과 같이 작업할 것을 권장한다.

*   GLO 데이터를 파일로 저장한 후 어플리케이션 및 DB 스키마에서 GLO를 사용하지 않도록 수정한다.
    
*   unloaddb, loaddb 유틸리티를 이용하여 DB 마이그레이션을 한다.
    
*   변경한 어플리케이션에 맞게 파일을 LOB 데이터로 로딩하는 작업을 수행하도록 한다.
    
*   수정한 어플리케이션이 정상 동작하는지 확인한다.


참고로, cubrid loaddb 유틸리티는 GLO 클래스를 상속받거나 GLO 클래스 타입을 가진 테이블을 로딩하려는 경우 " Error occurred during schema loading " 오류 메시지와 함께 데이터 로딩을 중지한다.

GLO 클래스의 지원 중단에 따라 각 인터페이스 별로 삭제한 함수는 다음과 같다.

+------------+----------------------------+
| 인터페이스 | 삭제한                     |
|            | 함수                       |
+============+============================+
| CCI        | cci_glo_append_data        |
|            |                            |
|            | cci_glo_compress_data      |
|            |                            |
|            | cci_glo_data_size          |
|            |                            |
|            | cci_glo_delete_data        |
|            |                            |
|            | cci_glo_destroy_data       |
|            |                            |
|            | cci_glo_insert_data        |
|            |                            |
|            | cci_glo_load               |
|            |                            |
|            | cci_glo_new                |
|            |                            |
|            | cci_glo_read_data          |
|            |                            |
|            | cci_glo_save               |
|            |                            |
|            | cci_glo_truncate_data      |
|            |                            |
|            | cci_glo_write_data         |
|            |                            |
+------------+----------------------------+
| JDBC       | CUBRIDConnection.getNewGLO |
|            |                            |
|            | CUBRIDOID.loadGLO          |
|            |                            |
|            | CUBRIDOID.saveGLO          |
|            |                            |
+------------+----------------------------+
| PHP        | cubrid_new_glo             |
|            |                            |
|            | cubrid_save_to_glo         |
|            |                            |
|            | cubrid_load_from_glo       |
|            |                            |
|            | cubrid_send_glo            |
|            |                            |
+------------+----------------------------+

마스터 프로세스와 서버 프로세스 간 프로토콜 변경 및 두 개 버전을 동시에 운영하는 경우 포트 설정 필요(CUBRIDSUS-3564)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

마스터 프로세스(cub_master)와 서버 프로세스(cub_server) 간 통신 프로토콜 변경으로 인해 CUBRID 2008 R3.0 이상 버전의 마스터 프로세스는 하위 버전의 서버 프로세스와 통신할 수 없고, 하위 버전의 마스터 프로세스도 2008 R3.0 이상 버전의 서버 프로세스와 통신할 수 없다. 따라서, 이미 하위 버전이 설치되어 있는 환경에서 새 버전을 추가 설치하여, 두 개 버전의 CUBRID를 동시에 운영하는 경우 각각 서로 다른 포트를 사용하도록 cubrid.conf의 cubrid_port_id 시스템 파라미터를 수정해야 한다.


JDBC에서 연결 정보를 URL 스트링으로 입력하는 경우 물음표를 반드시 명시(CUBRIDSUS-3217)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

JDBC에서 URL 스트링으로 연결 정보를 입력하는 경우 수정 전 버전에서는 물음표(?)를 입력하지 않더라도 속성(PROPERTY) 정보가 적용되었으나, CUBRID 2008 R3.0부터는 문법에 따라 반드시 물음표를 명시해야 하고 이를 생략할 경우 에러를 출력한다. 또한, 연결 정보 중 USERNAME과 PASSWORD가 없더라도 반드시 콜론( : )을 명시해야 한다.

::

    URL=jdbc:CUBRID:127.0.0.1:31000:db1:::altHosts=127.0.0.2:31000,127.0.0.3:31000 -에러 처리
    URL=jdbc:CUBRID:127.0.0.1:31000:db1:::?altHosts=127.0.0.2:31000,127.0.0.3:31000 -정상 처리

DB 이름에 @를 포함할 수 없음(CUBRIDSUS-2828)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

DB 이름에 @이 포함되는 경우 호스트 이름이 명시된 것으로 해석될 수 있으므로 이를 방지하기 위하여 cubrid createdb, cubrid renamedb, cubrid copydb 유틸리티 실행 시 DB 이름에 @를 포함할 수 없도록 수정했다.
